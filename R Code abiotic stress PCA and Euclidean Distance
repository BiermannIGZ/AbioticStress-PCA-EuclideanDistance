#set the working directory with setwd() 
#download the hereafter mentioned packages and load the librarys: 
library ("ggplot2")
library ("prettyGraphs")
library ("FactoMineR")
library ("factoextra")
library ("ade4")
library ("ExPosition")
library ("philentropy")
library ("corrplot")
library ("openxlsx")
library ("readxl")
#open the dataset in R; ctrl and treatment of the same genotype have to be in alternating rows.

data <- read_excel("filepath.xlsx") #instead of \ use / within the path
data <- read_excel("C:/Users/.........xlsx") 
        
#display the head of your imported data frame:
head(data)

#Data frame can be divided into active and supplemental variables and individuals. For our analysis all genotypes must be maintained as active, while only traits are considered as active
data.active <- data[1:28, 3:13] #adapt to suit your input file
data.supplemental <- data[1:28,1:2] #adapt to suit your input file

res.pca.pre <- PCA(data.active, scale.unit = T, graph = F) # by adding argument ncp = X number of dimensions kept for the results is defined

#Check Eigenvalues and export to excel
eigenvalues <- get_eigenvalue(res.pca.pre)
eigenvalues.export <- data.frame(eigenvalues)
write.xlsx(eigenvalues.export, "Eigenvalues.xlsx")

#visualize Eigenvalues with a screen plot
fviz_eig(res.pca.pre, addlabels = T, ylim = c(0,60)) #if necessary increase ylim for visualization
#Export Screenplot
pdf("EigenvalueScreenPlot.pdf")
plot(fviz_eig(res.pca.pre, addlabels = T, ylim = c(0,60)))
dev.off()


#get first results about PCs and input variable contribution


#visualize relative relationships between variables
fviz_pca_var(res.pca.pre, col.var = "black", repel = TRUE)
#export
pdf("VariableCorrelationCycle.pdf")
plot(fviz_pca_var(res.pca.pre, col.var = "black", repel = TRUE))
dev.off()

#From now on only consider PCS with eigenvalue >1 --> repeat PCA but limit results to the respective amount of dimensions
head(eigenvalues)
#Rerun PCA to obtain final results
res.pca <- PCA(data.active, ncp = 3, scale.unit = T, graph = T) # changing ncp = X to the number of dimensions needed for analysis

#total cos2 of variables on PC 1-3
fviz_cos2(res.pca, choice = "var", axes = 1:3)#gives info on the quality of representation of traits within the n PCs; adapt axes to the number of dimensions needed to keep
#export
pdf("VariableCos2.pdf")
plot(fviz_cos2(res.pca, choice = "var", axes = 1:3))
dev.off()

#obtain and visualize variable contribution 
fviz_contrib(res.pca, choice = "var", axes = 1:3) #cumulative contribution or variables to the first 3 PCs
#export
pdf("VariableContribution.pdf")
plot(fviz_contrib(res.pca, choice = "var", axes = 1:3))
dev.off()

#visualize variable contribution to PCs and export
var <- get_pca_var(res.pca)
var.export <- data.frame(var$contrib)
write.xlsx(var.export, "VariableContributionToPCs.xlsx")

corrplot(var$contrib, is.corr=FALSE)    
pdf("VariableContributionCorrelationPlot.pdf")
plot(corrplot(var$contrib, is.corr=FALSE))
dev.off()



#Extract the coordinates of individuals within the different dimensions --> matrix called ind.coord  
get_pca_ind(res.pca)
ind.coord <- (res.pca[["ind"]][["coord"]])
ind.coord.export <- data.frame(data.supplemental,ind.coord)
write.xlsx(ind.coord.export, "IndividualCoordinatesForPlotting.xlsx")
#visualize and export
Fig.Ind.Cood <- ggplot(ind.coord.export, aes(Dim.1, Dim.2, colour=Genotype, shape=Treatment)) +
geom_point() +
theme(legend.position=c(0,1), legend.justification=c(0,1))
Fig.Ind.Cood

pdf("IndividualPCs2DScatterPlot.pdf")
plot(Fig.Ind.Cood)
dev.off()


#calculate euclidean distances of ind.coord.PC.Eig.bigger.than.one (others PCs/Dimensions must be removed from ind.coord by now. Best to not calculate them in a second PCA round)
ind.coord.dist <- distance(ind.coord, method = "euclidean")
ind.coord.dist.export <- data.frame(data.supplemental,ind.coord.dist)
write.xlsx(ind.coord.dist.export, "IndividualEuclideanDistance.xlsx")

#Next step is to extract the distances between treatment and control. Adapt to suit your number of genotypes.
#for 56 Genotypes use this:
res.ind.coord.dist <- c(ind.coord.dist[2,1], 
                        ind.coord.dist[2,1], 
                        ind.coord.dist[4,3], 
                        ind.coord.dist[4,3], 
                        ind.coord.dist[6,5], 
                        ind.coord.dist[6,5], 
                        ind.coord.dist[8,7], 
                        ind.coord.dist[8,7], 
                        ind.coord.dist[10,9], 
                        ind.coord.dist[10,9], 
                        ind.coord.dist[12,11], 
                        ind.coord.dist[12,11], 
                        ind.coord.dist[14,13], 
                        ind.coord.dist[14,13], 
                        ind.coord.dist[16,15], 
                        ind.coord.dist[16,15], 
                        ind.coord.dist[18,17], 
                        ind.coord.dist[18,17], 
                        ind.coord.dist[20,19], 
                        ind.coord.dist[20,19], 
                        ind.coord.dist[22,21], 
                        ind.coord.dist[22,21], 
                        ind.coord.dist[24,23], 
                        ind.coord.dist[24,23], 
                        ind.coord.dist[26,25], 
                        ind.coord.dist[26,25], 
                        ind.coord.dist[28,27],
                        ind.coord.dist[28,27],
                        ind.coord.dist[30,29], 
                        ind.coord.dist[30,29], 
                        ind.coord.dist[32,31], 
                        ind.coord.dist[32,31], 
                        ind.coord.dist[34,33], 
                        ind.coord.dist[34,33], 
                        ind.coord.dist[36,35], 
                        ind.coord.dist[36,35], 
                        ind.coord.dist[38,37], 
                        ind.coord.dist[38,37], 
                        ind.coord.dist[40,39], 
                        ind.coord.dist[40,39], 
                        ind.coord.dist[42,41], 
                        ind.coord.dist[42,41], 
                        ind.coord.dist[44,43], 
                        ind.coord.dist[44,43], 
                        ind.coord.dist[46,45], 
                        ind.coord.dist[46,45], 
                        ind.coord.dist[48,47], 
                        ind.coord.dist[48,47], 
                        ind.coord.dist[50,49], 
                        ind.coord.dist[50,49], 
                        ind.coord.dist[52,51], 
                        ind.coord.dist[52,51], 
                        ind.coord.dist[54,53], 
                        ind.coord.dist[54,53], 
                        ind.coord.dist[56,55], 
                        ind.coord.dist[56,55], 
                        ind.coord.dist[58,57], 
                        ind.coord.dist[58,57], 
                        ind.coord.dist[60,59], 
                        ind.coord.dist[60,59], 
                        ind.coord.dist[62,61], 
                        ind.coord.dist[62,61], 
                        ind.coord.dist[64,63], 
                        ind.coord.dist[64,63], 
                        ind.coord.dist[66,65], 
                        ind.coord.dist[66,65], 
                        ind.coord.dist[68,67], 
                        ind.coord.dist[68,67], 
                        ind.coord.dist[70,69], 
                        ind.coord.dist[70,69], 
                        ind.coord.dist[72,71], 
                        ind.coord.dist[72,71], 
                        ind.coord.dist[74,73], 
                        ind.coord.dist[74,73], 
                        ind.coord.dist[76,75], 
                        ind.coord.dist[76,75], 
                        ind.coord.dist[78,77], 
                        ind.coord.dist[78,77], 
                        ind.coord.dist[80,79], 
                        ind.coord.dist[80,79], 
                        ind.coord.dist[82,81], 
                        ind.coord.dist[82,81], 
                        ind.coord.dist[84,83], 
                        ind.coord.dist[84,83], 
                        ind.coord.dist[86,85], 
                        ind.coord.dist[86,85], 
                        ind.coord.dist[88,87], 
                        ind.coord.dist[88,87], 
                        ind.coord.dist[90,89], 
                        ind.coord.dist[90,89], 
                        ind.coord.dist[92,91], 
                        ind.coord.dist[92,91], 
                        ind.coord.dist[94,93], 
                        ind.coord.dist[94,93], 
                        ind.coord.dist[96,95], 
                        ind.coord.dist[96,95], 
                        ind.coord.dist[98,97], 
                        ind.coord.dist[98,97], 
                        ind.coord.dist[100,99], 
                        ind.coord.dist[100,99], 
                        ind.coord.dist[102,101], 
                        ind.coord.dist[102,101], 
                        ind.coord.dist[104,103], 
                        ind.coord.dist[104,103], 
                        ind.coord.dist[106,105], 
                        ind.coord.dist[106,105], 
                        ind.coord.dist[108,107], 
                        ind.coord.dist[108,107], 
                        ind.coord.dist[110,109], 
                        ind.coord.dist[110,109], 
                        ind.coord.dist[112,111],
                        ind.coord.dist[112,111]
                        )

#compile distance results and export
res.distance <- data.frame(data, res.ind.coord.dist)
write.xlsx(res.distance, "DistanceResults.xlsx")

#Prepare and extract distances of genotypes for normality check 
distance.normality <- (res.distance[c(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27),c(1, 14)]) # For correct normality check, vectors MUST be adapted to extract 1) Genotype 2) Distance
write.xlsx(distance.normality, "DistanceNormality.xlsx")

############################################################

#Checking normality:
# http://www.sthda.com/english/wiki/normality-test-in-r

library ("ggplot2")
library ("dplyr")
library ("ggpubr")


#First: Statistical test - If p-value > 0.05 we van assume normality
shapiro.test(distance.normality$res.ind.coord.dist)
res.shapio <- shapiro.test(res.distance$res.ind.coord.dist)
#export
sink("DistanceNormalityShapiroWilk.txt")
print(res.shapio)
sink()

#Density plot of Euclidean Distances
ggdensity(distance.normality$res.ind.coord.dist, main ="Euclidean Distances between treatments",xlab = "Euclidean Distance")
Fig.DensityPlot <- ggdensity(distance.normality$res.ind.coord.dist, main ="Euclidean Distances between treatments",xlab = "Euclidean Distance")
pdf("DensityPlotEuclideanDistance.pdf")
plot(Fig.DensityPlot)
dev.off()

ggqqplot(distance.normality$res.ind.coord.dist)
Fig.QQPlot <-ggqqplot(distance.normality$res.ind.coord.dist)
pdf("Q-Q Plot EuclideanDistance.pdf")
plot(Fig.QQPlot)
dev.off()
